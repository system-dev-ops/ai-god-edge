'use client'

import { useEffect, useState } from 'react'
// import { useRouter } from 'next/router' // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useRouter ‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
import { createClient } from '@supabase/supabase-js'

// ‚úÖ ‡πÉ‡∏™‡πà ENV ‡∏à‡∏≤‡∏Å .env.local ‡∏´‡∏£‡∏∑‡∏≠ Vercel Environment
// Make sure to set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in your .env.local or Vercel Environment Variables
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export default function AdminPage() {
  const [user, setUser] = useState<any>(null) // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  const [logs, setLogs] = useState<any[]>([]) // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs ‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
  const [loading, setLoading] = useState(true) // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [email, setEmail] = useState('') // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
  // Check for an active Supabase session on component mount
  useEffect(() => {
    const getSession = async () => {
      // ‡∏î‡∏∂‡∏á session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Supabase Auth
      const {
        data: { session },
      } = await supabase.auth.getSession()

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ user state
      if (session?.user) {
        setUser(session.user)
      }

      setLoading(false) // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÅ‡∏•‡πâ‡∏ß
    }

    getSession()
  }, []) // ‡∏£‡∏±‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  // Fetch chat logs from Supabase once the user is authenticated
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô) ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!user) return

    const fetchLogs = async () => {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'chat_logs'
      const { data, error } = await supabase
        .from('chat_logs') // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Supabase
        .select('*') // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        .order('created_at', { ascending: true }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logs state
      if (!error) {
        setLogs(data || [])
      } else {
        console.error('‚ùå Error fetching logs:', error) // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    }

    fetchLogs()
  }, [user]) // ‡∏£‡∏±‡∏ô effect ‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user state ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sign in ‡∏î‡πâ‡∏ß‡∏¢ OTP (Passwordless login)
  // Handles user login via email OTP (one-time password)
  const handleLogin = async () => {
    const { error } = await supabase.auth.signInWithOtp({ email })
    if (error) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: ' + error.message) // ‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
    } else {
      alert('‚úÖ ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Inbox ‡∏´‡∏£‡∏∑‡∏≠ Junk Mail') // ‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV
  // Exports the current chat logs to a CSV file
  const exportToCSV = () => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î header ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
    const header = 'session_id,role,content\n'
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV
    const rows = logs.map(
      (log) =>
        // ‡πÉ‡∏ä‡πâ double quotes ‡∏Ñ‡∏£‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ field ‡πÅ‡∏•‡∏∞ escape double quotes ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô content
        `"${log.session_id}","${log.role}","${log.content.replace(/"/g, '""')}"`
    )
    // ‡∏£‡∏ß‡∏° header ‡πÅ‡∏•‡∏∞ rows ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
    const csvContent = header + rows.join('\n')
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ CSV
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.download = 'chat_logs.csv' // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    link.click() // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
  }

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Loading state
  // Display loading message while checking session
  if (loading) return <div>üîÑ Loading...</div>

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  // Display login form if user is not authenticated
  if (!user) {
    return (
      <div style={{ padding: 20 }}>
        <h2>üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•</h2> {/* Login page title */}
        <input
          type="email"
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" // Placeholder text for email input
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          style={{ padding: 10, width: '300px' }}
        />
        <br />
        <button onClick={handleLogin} style={{ marginTop: 10, padding: '10px 20px' }}>
          ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö {/* Login button */}
        </button>
      </div>
    )
  }

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° logs ‡∏ï‡∏≤‡∏° session_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  // Group logs by session_id for better readability
  const grouped = logs.reduce((acc, log) => {
    if (!acc[log.session_id]) acc[log.session_id] = []
    acc[log.session_id].push(log)
    return acc
  }, {} as Record<string, { id: string; session_id: string; role: string; content: string; created_at: string }[]>) // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏° Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Record

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Admin ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  // Main Admin page content after successful authentication
  return (
    <main style={{ padding: 20, maxWidth: 800, margin: 'auto' }}>
      <h1>üß† Admin - ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ï AI God</h1> {/* Admin page title */}
      <p>üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user.email}</p> {/* Display logged-in user's email */}
      <button onClick={exportToCSV} style={{ margin: '10px 0' }}>
        üìÑ Export ‡πÄ‡∏õ‡πá‡∏ô CSV {/* Export button */}
      </button>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs */}
      {loading ? ( // This loading state is for initial fetchLogs, but user check is already done above
        <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
      ) : Object.keys(grouped).length === 0 ? ( // Check if there are any grouped sessions
        <p>ü§ñ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</p>
      ) : (
        <div style={{ maxHeight: 600, overflowY: 'auto', border: '1px solid #ccc', padding: 10 }}>
          {Object.entries(grouped).map(([sessionId, sessionLogs]: [string, { id: string; session_id: string; role: string; content: string; created_at: string }[]]) => ( // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ sessionLogs
            <div key={sessionId} style={{ marginBottom: 30 }}>
              <h3>üß¨ Session: {sessionId}</h3>
              {sessionLogs.map((log) => (
                <div key={log.id}>
                  <strong>{log.role === 'user' ? 'üôã‚Äç‚ôÇÔ∏è User' : 'ü§ñ AI'}:</strong> {log.content}
                </div>
              ))}
              <hr />
            </div>
          ))}
        </div>
      )}
    </main>
  )
}
